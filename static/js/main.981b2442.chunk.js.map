{"version":3,"sources":["themeContext.js","Header.js","Button.js","App.js","index.js"],"names":["React","createContext","Provider","Consumer","ThemeContextProvider","state","theme","toggleTheme","setState","prevState","value","this","props","children","Component","Header","context","className","Button","onClick","defaultProps","App","ReactDOM","render","document","getElementById"],"mappings":"gOAGA,EAA6BA,IAAMC,gBAA5BC,EAAP,EAAOA,SAAUC,EAAjB,EAAiBA,SAEXC,E,4MAEFC,MAAQ,CACJC,MAAQ,S,EAGZC,YAAc,WACV,EAAKC,UAAS,SAAAC,GACV,MAAO,CACHH,MAA0B,SAAnBG,EAAUH,MAAmB,OAAS,a,4CAIzD,WACI,OACI,cAACJ,EAAD,CAAUQ,MAAO,CAACJ,MAAOK,KAAKN,MAAMC,MAAOC,YAAaI,KAAKJ,aAA7D,SACKI,KAAKC,MAAMC,e,GAhBOb,IAAMc,WCgB1BC,MAZf,WACI,OACI,cAAC,EAAD,UACK,SAAAC,GAAO,OACJ,wBAAQC,UAAS,UAAKD,EAAQV,MAAb,UAAjB,SACI,+BAAsB,SAAjBU,EAAQV,MAAmB,QAAU,OAA1C,kBCXpB,SAASY,EAAON,GACZ,OACI,wBAAQK,UAAS,UAAKL,EAAMN,MAAX,UAA0Ba,QAASP,EAAML,YAA1D,0BAIRW,EAAOE,aAAe,CAClBd,MAAQ,SAEGY,QCSAG,MAdf,WACE,OACE,qCACE,cAAC,EAAD,IACA,cAAC,EAAD,UACK,SAAAL,GAAO,OACN,cAAC,EAAD,CAAQV,MAAOU,EAAQV,MAAOC,YAAaS,EAAQT,iBAGzD,cAAC,EAAD,QCNNe,IAASC,OACL,cAAC,EAAD,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.981b2442.chunk.js","sourcesContent":["import React from \"react\"\n\n//creating context and assigning the ThemeContext constant variable\nconst {Provider, Consumer} = React.createContext()\n\nclass ThemeContextProvider extends React.Component {\n\n    state = {\n        theme : \"light\"\n    }\n\n    toggleTheme = () => {\n        this.setState(prevState => {\n            return {\n                theme: prevState.theme == \"light\" ? \"dark\" : \"light\"\n            }\n        })\n    }\n    render() {\n        return (\n            <Provider value={{theme: this.state.theme, toggleTheme: this.toggleTheme}}>\n                {this.props.children}\n            </Provider>\n        )\n    }\n}\n\nexport {ThemeContextProvider, Consumer as ThemeContextConsumer}\n","import React from \"react\"\nimport {ThemeContextConsumer} from \"./themeContext\"\n\n/*\nN.B. Consumer will need to follow the render prop pattern,\nwhereby. the context object (from the Provider) will be passed into an\nanonymous function and then applied to where applicable.\n*/\n\nfunction Header() {\n    return (\n        <ThemeContextConsumer>\n            {context => (\n                <header className={`${context.theme}-theme`}>\n                    <h1>{context.theme == \"light\" ? \"Light\" : \"Dark\"} Theme</h1>\n                </header>\n            )}\n        </ThemeContextConsumer>\n    )\n}\n\nexport default Header\n","import React from \"react\"\nimport {ThemeContextConsumer} from \"./themeContext\"\n\nfunction Button(props) {\n    return (\n        <button className={`${props.theme}-theme`} onClick={props.toggleTheme}>Switch Theme</button>\n    )\n}\n\nButton.defaultProps = {\n    theme : \"light\"\n}\nexport default Button\n","import React from \"react\"\n\nimport Header from \"./Header\"\nimport Button from \"./Button\"\n\nimport {ThemeContextConsumer} from \"./themeContext\"\n\nfunction App() {\n  return (\n    <>\n      <Header/>\n      <ThemeContextConsumer>\n          {context => (\n            <Button theme={context.theme} toggleTheme={context.toggleTheme}/>\n          )}\n      </ThemeContextConsumer>\n      <Button/>\n    </>\n  )\n}\n\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\n\nimport \"./style.css\"\nimport App from \"./App\"\n\n//importing ThemeContextProvider class component:\nimport {ThemeContextProvider} from \"./themeContext\"\n\n//wrapping App around context provider, passing in value:\nReactDOM.render(\n    <ThemeContextProvider>\n        <App/>\n    </ThemeContextProvider>,\n    document.getElementById(\"root\")\n)\n"],"sourceRoot":""}